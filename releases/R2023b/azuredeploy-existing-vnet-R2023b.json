{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "clusterName": {
      "defaultValue": "myCluster",
      "minLength": 1,
      "maxLength": 61,
      "type": "String",
      "metadata": {
        "description": "Name to use for this cluster. This name will be shown in MATLAB as the cluster profile name."
      }
    },
    "numWorkerNodes": {
      "defaultValue": 2,
      "minValue": 0,
      "maxValue": 1000,
      "type": "Int",
      "metadata": {
        "description": "Number of Azure instances to start for the workers to run on."
      }
    },
    "minWorkerNodes": {
      "defaultValue": 0,
      "minValue": 0,
      "maxValue": 1000,
      "type": "Int",
      "metadata": {
        "description": "Minimum number of Azure instances running at all times."
      }
    },
    "maxWorkerNodes": {
      "defaultValue": 4,
      "minValue": 0,
      "maxValue": 1000,
      "type": "Int",
      "metadata": {
        "description": "Maximum number of Azure instances running at all times."
      }
    },
    "numWorkersPerNode": {
      "defaultValue": 2,
      "minValue": 1,
      "maxValue": 1000,
      "type": "Int",
      "metadata": {
        "description": "Number of MATLAB workers to start on each instance. Specify 1 worker for every 2 vCPUs, because this results in 1 worker per physical core. For example, a Standard_D64s_v3 virtual machine has 64 vCPUs, so can support 32 MATLAB workers. See https://docs.microsoft.com/en-us/azure/virtual-machines/sizes for details on vCPUs for each VM size."
      }
    },
    "headnodeVMSize": {
      "defaultValue": "Standard_D4s_v3",
      "type": "String",
      "metadata": {
        "description": "Azure VM size to use for the headnode, which will run the job manager. No workers will be started on this node, so this can be a smaller instance type than the worker nodes. See  https://docs.microsoft.com/en-us/azure/virtual-machines/sizes for a list of instance types."
      }
    },
    "workerVMSize": {
      "defaultValue": "Standard_F4s_v2",
      "type": "String",
      "metadata": {
        "description": "Azure VM size to use for the workers. See https://docs.microsoft.com/en-us/azure/virtual-machines/sizes for a list of instance types."
      }
    },
    "databaseVolumeSize": {
      "defaultValue": 100,
      "minValue": 0,
      "maxValue": 1023,
      "type": "Int",
      "metadata": {
        "description": "Size in GB of the volume to use for the database file. All job and task information, including input and output data will be stored on this volume and should therefore have enough capacity to store the expected amount of data. If set to 0, no volume will be created and the root volume of the instance will be used for the database."
      }
    },
    "clientIPAddress": {
      "minLength": 1,
      "type": "String",
      "metadata": {
        "description": "IP address range that can be used to access the cluster from MATLAB. This must be a valid IP CIDR range of the form x.x.x.x/x. Use the value &lt;your_public_ip_address&gt;/32 to restrict access to only your computer."
      }
    },
    "adminUsername": {
      "type": "String",
      "defaultValue": "ubuntu",
      "metadata": {
        "description": "Admin username for the cluster. To avoid any deployment errors, please check the list of [disallowed values](https://docs.microsoft.com/en-us/rest/api/compute/virtual-machines/create-or-update?tabs=HTTP#osprofile) for adminUsername."
      }
    },
    "adminPassword": {
      "type": "SecureString",
      "metadata": {
        "description": "Choose the password for the admin user of the cluster. This password and the chosen admin username are required to login into any instance in the cluster using ssh. For the deployment to succeed, your password must meet Azure's password requirements. See [Password requirements when creating a VM](https://docs.microsoft.com/en-us/azure/virtual-machines/linux/faq?WT.mc_id=Portal-fx#what-are-the-password-requirements-when-creating-a-vm-) for information on the password requirements."
      }
    },
    "virtualNetworkResourceID": {
      "type": "String",
      "metadata": {
        "description": "Resource ID of an existing virtual network to deploy your cluster into. You can find this under the Properties of your virtual network."
      }
    },
    "subnetName": {
      "defaultValue": "default",
      "type": "String",
      "metadata": {
        "description": "Name of an existing subnet within your virtual network to deploy your cluster into."
      }
    },
    "licenseServer": {
      "defaultValue": "",
      "type": "String",
      "metadata": {
        "description": "License Manager for MATLAB in the form port@hostname. If not specified, online licensing is used. Otherwise, the license manager must be accessible from the specified virtual network and subnet(s)."
      }
    },
    "enableAutoscaling": {
      "defaultValue": "No",
      "allowedValues": [
        "Yes",
        "No"
      ],
      "type": "String",
      "metadata": {
        "description": "Flag indicating whether instance autoscaling is enabled. For more information about autoscaling, see https://github.com/mathworks-ref-arch/matlab-parallel-server-on-azure-lin#use-autoscaling."
      }
    },
    "optionalUserCommand": {
      "defaultValue": "",
      "type": "String",
      "metadata": {
        "description": "Provide an optional inline shell command to run on machine launch. For example, to set an environment variable CLOUD=AZURE, use this command excluding the angle brackets: &lt;echo -e \"export CLOUD=AZURE\" &#124; sudo tee -a /etc/profile.d/setenvvar.sh && source /etc/profile&gt;. To run an external script, use this command excluding the angle brackets: &lt;wget -O /tmp/my-script.sh \"https://example.com/script.sh\" && bash /tmp/my-script.sh&gt;. Find the logs at '/var/log/mathworks.log'."
      }
    }
  },
  "variables": {
    "namingPrefix": "[toLower(take(parameters('clusterName'), 15))]",
    "addressPrefix": "10.0.0.0/16",
    "subnetPrefix": "10.0.0.0/24",
    "newOrExistingVirtualNetwork": "Existing",
    "virtualNetworkCreateName": "[concat(variables('namingPrefix'), '-vnet')]",
    "subnetCreateName": "[concat(variables('namingPrefix'), '-subnet')]",
    "virtualNetworkName": "[if(equals(variables('newOrExistingVirtualNetwork'),'Existing'),last(split(parameters('virtualNetworkResourceID'),'/')),variables('virtualNetworkCreateName'))]",
    "subnetName": "[if(equals(variables('newOrExistingVirtualNetwork'),'Existing'),parameters('subnetName'),variables('subnetCreateName'))]",
    "subnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetName'))]",
    "subnet": "[if(equals(variables('newOrExistingVirtualNetwork'),'New'),variables('subnetRef'),concat(parameters('virtualNetworkResourceID'), '/subnets/', parameters('subnetName')))]",
    "cuaTrackingNum": "pid-bcfd52e4-d2d7-4ca3-ba20-9a37f7f85c5f-partnercenter",
    "headnodeMachineName": "[concat(take(variables('namingPrefix'), 6), '-headnode')]",
    "vmssName": "[concat(take(variables('namingPrefix'), 4), '-vmss')]",
    "publisher": "mathworks-inc",
    "offer": "matlab-parallel-server-ref-arch-vm-offer",
    "sku": "matlab-parallel-server-ref-arch-r2023b-vm-sku",
    "version": "1.0.0",
    "imageReference": {
      "publisher": "[variables('publisher')]",
      "offer": "[variables('offer')]",
      "sku": "[variables('sku')]",
      "version": "[variables('version')]"
    },
    "plan": {
      "name": "[variables('sku')]",
      "publisher": "[variables('publisher')]",
      "product": "[variables('offer')]"
    },
    "osDisk": {
      "createOption": "fromImage",
      "managedDisk": {
        "storageAccountType": "Premium_LRS"
      }
    },
    "storageProfileWithoutDataDisk": {
      "imageReference": "[variables('imageReference')]",
      "osDisk": "[variables('osDisk')]"
    },
    "storageProfileWithDataDisk": {
      "imageReference": "[variables('imageReference')]",
      "osDisk": "[variables('osDisk')]",
      "dataDisks": [
        {
          "name": "[concat(variables('headnodeMachineName'), '-database')]",
          "diskSizeGB": "[parameters('databaseVolumeSize')]",
          "lun": 0,
          "createOption": "Empty",
          "caching": "None"
        }
      ]
    },
    "publicIPPostfix": "pub",
    "headnodeIPName": "[concat(variables('namingPrefix'), variables('publicIPPostfix'))]",
    "dnsLabelPrefix": "[concat('azure-', uniqueString(resourceGroup().id))]",
    "publicIpTimeout": "20",
    "networkInterfacePostfix": "nic",
    "networkInterfaceName": "[concat(variables('headnodeMachineName'), variables('networkInterfacePostfix'))]",
    "publicIpConfigPostfix": "ipConfig",
    "networkSecurityGroupName": "[concat(variables('namingPrefix'), '-nsg')]",
    "totalPorts": "[add(7, mul(4, parameters('numWorkersPerNode')))]",
    "startPort": 27350,
    "finalPort": "[add(variables('startPort'), variables('totalPorts'))]",
    "storageAccountName": "[concat(take(concat(variables('namingPrefix'), uniquestring(resourceGroup().id)), 17), 'storage')]",
    "storageAccountType": "Standard_LRS",
    "userDataScript": [
      "#!/usr/bin/env bash",
      "# Copyright 2023 The MathWorks, Inc.",
      "",
      "STARTUP_FOLDER=/opt/mathworks/startup",
      "# Load startup variables",
      "if [[ -r ${STARTUP_FOLDER}/.env ]]; then",
      "    set -o allexport",
      "    source ${STARTUP_FOLDER}/.env",
      "    set +o allexport",
      "fi",
      "",
      "# Define startup parameters",
      "[concat('export USERNAME=', parameters('adminUsername'))]",
      "[concat('export JOB_MANAGER_NAME=', parameters('clusterName'))]",
      "[concat('export WORKERS_PER_NODE=', parameters('numWorkersPerNode'))]",
      "[concat('export MLM_LICENSE_FILE=', parameters('licenseServer'))]",
      "[concat('export AZURE_STORAGE_ACCOUNT=', variables('storageAccountName'))]",
      "[concat('export OPTIONAL_USER_COMMAND=''', parameters('optionalUserCommand'), '''')]",
      "{{NODE_SPECIFIC_PARAMETERS}}",
      "",
      "# Run startup scripts",
      "mkdir -p /var/log/mathworks",
      "run-parts --verbose --exit-on-error --regex '^[0-9]+_.+$' ${STARTUP_FOLDER} >> /var/log/mathworks/startup.log 2>&1"
    ],
    "startupParametersHeadnode": [
      "export NODE_TYPE='HEADNODE'",
      "[concat('export ENABLE_AUTOSCALING=', parameters('enableAutoscaling'))]",
      "[concat('export MAX_NODES=', parameters('maxWorkerNodes'))]"
    ],
    "startupParametersWorker": [
      "export NODE_TYPE='WORKER'"
    ],
    "autoscalingRoleName": "[guid(resourceGroup().id, 'autoscaling-role')]",
    "tagsForAll": {
      "provider": "[variables('cuaTrackingNum')]"
    },
    "tagsForVMSS": {
      "mwMinCount": "[parameters('minWorkerNodes')]",
      "mwDesiredCount": "[parameters('numWorkerNodes')]",
      "mwMaxCount": "[parameters('maxWorkerNodes')]",
      "mwWorkersPerNode": "[parameters('numWorkersPerNode')]",
      "mwWorkerIdleTimeoutMinutes": 10
    }
  },
  "resources": [
    {
      "condition": "[equals(variables('newOrExistingVirtualNetwork'),'New')]",
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2020-05-01",
      "name": "[variables('virtualNetworkName')]",
      "location": "[resourceGroup().location]",
      "tags": "[variables('tagsForAll')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetCreateName')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefix')]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2020-05-01",
      "name": "[variables('headnodeIPName')]",
      "location": "[resourceGroup().location]",
      "tags": "[variables('tagsForAll')]",
      "properties": {
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[concat(variables('headnodeMachineName'), variables('dnsLabelPrefix'))]"
        },
        "idleTimeoutInMinutes": "[variables('publicIpTimeout')]"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-06-01",
      "name": "[variables('storageAccountName')]",
      "location": "[resourceGroup().location]",
      "tags": "[variables('tagsForAll')]",
      "sku": {
        "name": "[variables('storageAccountType')]"
      },
      "kind": "Storage",
      "properties": {}
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2020-05-01",
      "name": "[variables('networkSecurityGroupName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
      ],
      "tags": "[variables('tagsForAll')]",
      "properties": {
        "securityRules": [
          {
            "name": "default-allow-ssh",
            "properties": {
              "priority": 1000,
              "sourceAddressPrefix": "[parameters('clientIPAddress')]",
              "protocol": "Tcp",
              "destinationPortRange": "22",
              "access": "Allow",
              "direction": "Inbound",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*"
            }
          },
          {
            "name": "mathworks-job-scheduler-inbound",
            "properties": {
              "priority": 1010,
              "sourceAddressPrefix": "[parameters('clientIPAddress')]",
              "protocol": "Tcp",
              "destinationPortRange": "[concat(variables('startPort'), '-', variables('finalPort'))]",
              "access": "Allow",
              "direction": "Inbound",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*"
            }
          },
          {
            "name": "allow-internal-traffic",
            "properties": {
              "priority": 1020,
              "sourceAddressPrefix": "VirtualNetwork",
              "protocol": "Tcp",
              "destinationPortRange": "*",
              "access": "Allow",
              "direction": "Inbound",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "VirtualNetwork"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-05-01",
      "name": "[variables('networkInterfaceName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIpAddresses', variables('headnodeIPName'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
      ],
      "tags": "[variables('tagsForAll')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "[concat(variables('headnodeMachineName'), variables('publicIpConfigPostfix'))]",
            "properties": {
              "subnet": {
                "id": "[variables('subnet')]"
              },
              "privateIPAllocationMethod": "Dynamic",
              "publicIpAddress": {
                "id": "[resourceId('Microsoft.Network/publicIpAddresses', variables('headnodeIPName'))]"
              }
            }
          }
        ],
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2022-03-01",
      "name": "[variables('headnodeMachineName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]"
      ],
      "tags": "[variables('tagsForAll')]",
      "plan": "[variables('plan')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "osProfile": {
          "computerName": "[variables('headnodeMachineName')]",
          "AdminUsername": "[parameters('adminUsername')]",
          "AdminPassword": "[parameters('adminPassword')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": false,
            "provisionVmAgent": true
          }
        },
        "hardwareProfile": {
          "vmSize": "[parameters('headnodeVMSize')]"
        },
        "storageProfile": "[if(greater(parameters('databaseVolumeSize'), 0), variables('storageProfileWithDataDisk'), variables('storageProfileWithoutDataDisk'))]",
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]"
            }
          ]
        },
        "userData": "[base64(replace(join(variables('userDataScript'), '\n'), '{{NODE_SPECIFIC_PARAMETERS}}', concat(join(variables('startupParametersHeadnode'), '\n'), '\nexport AZURE_STORAGE_KEY=', listKeys(variables('storageAccountName'), '2017-06-01').keys[0].value, '\nexport HEADNODE_HOSTNAME=', reference(variables('headnodeIPName')).dnsSettings.fqdn)))]"
      }
    },
    {
      "condition": "[equals(parameters('enableAutoscaling'), 'Yes')]",
      "type": "Microsoft.Authorization/roleDefinitions",
      "apiVersion": "2018-01-01-preview",
      "name": "[variables('autoscalingRoleName')]",
      "tags": "[variables('tagsForAll')]",
      "properties": {
        "assignableScopes": [
          "[resourceGroup().id]"
        ],
        "description": "Grants access to manage VMSS and VMs.",
        "permissions": [
          {
            "actions": [
              "Microsoft.Compute/virtualMachineScaleSets/read",
              "Microsoft.Compute/virtualMachineScaleSets/write",
              "Microsoft.Compute/virtualMachineScaleSets/delete/action",
              "Microsoft.Compute/virtualMachineScaleSets/virtualMachines/read",
              "Microsoft.Compute/virtualMachineScaleSets/virtualMachines/write",
              "Microsoft.Compute/virtualMachineScaleSets/virtualMachines/delete"
            ]
          }
        ],
        "roleName": "[concat('Autoscaling Orchestrator - ', resourceGroup().name)]",
        "type": "customRole"
      }
    },
    {
      "condition": "[equals(parameters('enableAutoscaling'), 'Yes')]",
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-10-01-preview",
      "name": "[guid(resourceGroup().id, 'headnode-role')]",
      "dependsOn": [
        "[resourceId('Microsoft.Authorization/roleDefinitions/', variables('autoscalingRoleName'))]",
        "[resourceId('Microsoft.Compute/virtualMachines/', variables('headnodeMachineName'))]"
      ],
      "tags": "[variables('tagsForAll')]",
      "properties": {
        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions/', variables('autoscalingRoleName'))]",
        "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', variables('headnodeMachineName')), '2022-03-01', 'Full').identity.principalId]",
        "principalType": "ServicePrincipal"
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "apiVersion": "2022-03-01",
      "name": "[variables('vmssName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines/', variables('headnodeMachineName'))]"
      ],
      "tags": "[union(variables('tagsForAll'), if(equals(parameters('enableAutoscaling'), 'Yes'), variables('tagsForVMSS'), json('{}')))]",
      "sku": {
        "name": "[parameters('workerVMSize')]",
        "tier": "Standard",
        "capacity": "[parameters('numWorkerNodes')]"
      },
      "plan": "[variables('plan')]",
      "properties": {
        "overprovision": false,
        "upgradepolicy": {
          "mode": "Automatic"
        },
        "virtualMachineProfile": {
          "osProfile": {
            "computerNamePrefix": "[variables('vmssName')]",
            "AdminUsername": "[parameters('adminUsername')]",
            "AdminPassword": "[parameters('adminPassword')]",
            "linuxConfiguration": {
              "disablePasswordAuthentication": false,
              "provisionVmAgent": true
            }
          },
          "storageProfile": "[variables('storageProfileWithoutDataDisk')]",
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "[concat(variables('vmssName'), variables('networkInterfacePostfix'))]",
                "properties": {
                  "primary": true,
                  "ipConfigurations": [
                    {
                      "name": "[concat(variables('vmssName'), variables('publicIpConfigPostfix'))]",
                      "properties": {
                        "subnet": {
                          "id": "[variables('subnet')]"
                        },
                        "publicIpAddressConfiguration": {
                          "name": "[variables('publicIpPostfix')]",
                          "properties": {
                            "dnsSettings": {
                              "domainNameLabel": "[concat(variables('vmssName'), variables('dnsLabelPrefix'))]"
                            },
                            "idleTimeoutInMinutes": "[variables('publicIpTimeout')]"
                          }
                        }
                      }
                    }
                  ],
                  "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
                  }
                }
              }
            ]
          },
          "userData": "[base64(replace(join(variables('userDataScript'), '\n'), '{{NODE_SPECIFIC_PARAMETERS}}', concat(join(variables('startupParametersWorker'), '\n'), '\nexport AZURE_STORAGE_KEY=', listKeys(variables('storageAccountName'), '2017-06-01').keys[0].value, '\nexport HEADNODE_HOSTNAME=', reference(variables('headnodeIPName')).dnsSettings.fqdn, '\nexport HEADNODE_LOCAL_IP=', reference(variables('networkInterfaceName')).ipConfigurations[0].properties.privateIPAddress)))]"
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "name": "pid-bcfd52e4-d2d7-4ca3-ba20-9a37f7f85c5f-partnercenter",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachineScaleSets/', variables('vmssName'))]"
      ],
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      }
    }
  ],
  "outputs": {
    "virtualNetworkResourceID": {
      "type": "String",
      "value": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]"
    }
  }
}