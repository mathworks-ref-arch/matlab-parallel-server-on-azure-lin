{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "clusterName": {
      "defaultValue": "myCluster",
      "minLength": 1,
      "maxLength": 61,
      "type": "String",
      "metadata": {
        "description": "Name to use for this cluster. This name is shown in MATLAB as the cluster profile name."
      }
    },
    "numWorkerNodes": {
      "defaultValue": 2,
      "minValue": 0,
      "maxValue": 1000,
      "type": "Int",
      "metadata": {
        "description": "Number of Azure instances to start for the workers to run on."
      }
    },
    "minWorkerNodes": {
      "defaultValue": 0,
      "minValue": 0,
      "maxValue": 1000,
      "type": "Int",
      "metadata": {
        "description": "Minimum number of Azure instances running at all times."
      }
    },
    "maxWorkerNodes": {
      "defaultValue": 4,
      "minValue": 0,
      "maxValue": 1000,
      "type": "Int",
      "metadata": {
        "description": "Maximum number of Azure instances running at all times."
      }
    },
    "numWorkersPerNode": {
      "defaultValue": 2,
      "minValue": 1,
      "maxValue": 1000,
      "type": "Int",
      "metadata": {
        "description": "Number of MATLAB workers to start on each instance. Specify 1 worker for every 2 vCPUs, because this results in 1 worker per physical core. For example, a Standard_D64s_v3 virtual machine has 64 vCPUs, so can support 32 MATLAB workers. See https://learn.microsoft.com/azure/virtual-machines/sizes for details on vCPUs for each VM size."
      }
    },
    "headnodeVMSize": {
      "defaultValue": "Standard_D4s_v3",
      "type": "String",
      "metadata": {
        "description": "Azure VM size to use for the headnode, which runs the job manager. No workers are started on this node, so this can be a smaller instance type than the worker nodes. By default, the heap memory for the job manager is set between 1024 MiB and a maximum of half of the instance memory, depending on the total number of MATLAB workers. See  https://learn.microsoft.com/azure/virtual-machines/sizes for a list of instance types."
      }
    },
    "workerVMSize": {
      "defaultValue": "Standard_F4s_v2",
      "type": "String",
      "metadata": {
        "description": "Azure VM size to use for the workers. By default, the heap memory for all worker process is set between 1024 MiB and a maximum of a quarter of the instance memory, depending on the number of MATLAB workers on the VM. See https://learn.microsoft.com/azure/virtual-machines/sizes for a list of instance types."
      }
    },
    "useSpotInstancesForWorkerNodes": {
      "defaultValue": "No",
      "type": "string",
      "allowedValues": [
        "Yes",
        "No"
      ],
      "metadata": {
        "description": "Option indicating whether to enable Azure Spot Virtual Machines for worker nodes. For more information, refer to the FAQ section in the deployment README."
      }
    },
    "databaseVolumeSize": {
      "defaultValue": 100,
      "minValue": 0,
      "maxValue": 1023,
      "type": "Int",
      "metadata": {
        "description": "Size in GB of the volume to use for the database file. All job and task information, including input and output data is stored on this volume and should therefore have enough capacity to store the expected amount of data. If set to 0, no volume is created and the root volume of the instance is used for the database."
      }
    },
    "sharedPersistedStorage": {
      "defaultValue": 100,
      "minValue": 0,
      "maxValue": 102400,
      "type": "Int",
      "metadata": {
        "description": "Size in GB of the persisted storage to mount across the cluster. The storage has a default and minimum capacity of 100 GB and can expand to 100 TB. If set to 0, no persisted storage is created."
      }
    },
    "clientIPAddress": {
      "minLength": 1,
      "type": "String",
      "metadata": {
        "description": "IP address range that can be used to access the cluster from MATLAB. This must be a valid IP CIDR range of the form x.x.x.x/x. Use the value &lt;your_public_ip_address&gt;/32 to restrict access to only your computer."
      }
    },
    "adminUsername": {
      "type": "String",
      "defaultValue": "ubuntu",
      "metadata": {
        "description": "Admin username for the cluster. To avoid any deployment errors, please check the list of [disallowed values](https://docs.microsoft.com/en-us/rest/api/compute/virtual-machines/create-or-update?tabs=HTTP#osprofile) for adminUsername."
      }
    },
    "adminPassword": {
      "type": "SecureString",
      "metadata": {
        "description": "Choose the password for the admin user of the cluster. This password and the chosen admin username are required to login into any instance in the cluster using ssh. For the deployment to succeed, your password must meet Azure's password requirements. See [Password requirements when creating a VM](https://docs.microsoft.com/en-us/azure/virtual-machines/linux/faq?WT.mc_id=Portal-fx#what-are-the-password-requirements-when-creating-a-vm-) for information on the password requirements."
      }
    },
    "virtualNetworkResourceID": {
      "type": "String",
      "metadata": {
        "description": "Resource ID of an existing virtual network to deploy your cluster into. You can find this under the Properties of your virtual network."
      }
    },
    "subnetName": {
      "defaultValue": "default",
      "type": "String",
      "metadata": {
        "description": "Name of an existing subnet within your virtual network to deploy your cluster into."
      }
    },
    "licenseServer": {
      "defaultValue": "",
      "type": "String",
      "metadata": {
        "description": "License Manager for MATLAB in the form port@hostname. If not specified, online licensing is used. Otherwise, the license manager must be accessible from the specified virtual network and subnet(s)."
      }
    },
    "MJSSecurityLevel": {
      "metadata": {
        "description": "Security level for the cluster. Level 0: Any user can access any jobs and tasks. Level 1: Accessing other users' jobs and tasks issues a warning. However, all users can still perform all actions. Level 2: Users must enter a password to access their jobs and tasks. The job owner can grant access to other users."
      },
      "type": "String",
      "allowedValues": [
        "0",
        "1",
        "2"
      ],
      "defaultValue": "0"
    },
    "enableAutoscaling": {
      "defaultValue": "No",
      "allowedValues": [
        "Yes",
        "No"
      ],
      "type": "String",
      "metadata": {
        "description": "Flag indicating whether instance autoscaling is enabled. For more information about autoscaling, see https://github.com/mathworks-ref-arch/matlab-parallel-server-on-azure-lin#use-autoscaling."
      }
    },
    "automaticallyTerminateCluster": {
      "defaultValue": "Never",
      "allowedValues": [
        "Disable auto-termination",
        "Never",
        "When cluster is idle",
        "After 1 hour",
        "After 2 hours",
        "After 3 hours",
        "After 4 hours",
        "After 5 hours",
        "After 6 hours",
        "After 7 hours",
        "After 8 hours",
        "After 9 hours",
        "After 10 hours",
        "After 11 hours",
        "After 12 hours",
        "After 13 hours",
        "After 14 hours",
        "After 15 hours",
        "After 16 hours",
        "After 17 hours",
        "After 18 hours",
        "After 19 hours",
        "After 20 hours",
        "After 21 hours",
        "After 22 hours",
        "After 23 hours",
        "After 24 hours"
      ],
      "type": "String",
      "metadata": {
        "description": "Option to auto-terminate the cluster after a few hours or when idle. When the cluster is terminated, all worker nodes are deleted and the headnode is deallocated. Select 'Never' to disable auto-termination now but you can enable it later. Select 'Disable auto-termination' to fully disable this feature or if you do not have the permissions to create and assign roles in your subscription. For more information, see [Automatically terminate the MATLAB Parallel Server cluster](https://github.com/mathworks-ref-arch/matlab-parallel-server-on-azure-lin#automatically-terminate-the-matlab-parallel-server-cluster)."
      }
    },
    "MJSSchedulingAlgorithm": {
      "metadata": {
        "description": "Scheduling algorithm for the job manager. 'standard' spreads communicating jobs across as few worker machines as possible to reduce communication overheads and fills in unused spaces on worker machines with independent jobs. Suitable for good behaviour for a wide range of uses including autoscaling. 'loadBalancing' distributes load evenly across the cluster to give as many resources as possible to running jobs and tasks when the cluster is underutilized."
      },
      "type": "String",
      "allowedValues": [
        "standard",
        "loadBalancing"
      ],
      "defaultValue": "standard"
    },
    "optionalUserCommand": {
      "defaultValue": "",
      "type": "String",
      "metadata": {
        "description": "Provide an optional inline shell command to run on machine launch. For example, to set an environment variable CLOUD=AZURE, use this command excluding the angle brackets: &lt;echo -e \"export CLOUD=AZURE\" &#124; sudo tee -a /etc/profile.d/setenvvar.sh && source /etc/profile&gt;. To run an external script, use this command excluding the angle brackets: &lt;wget -O /tmp/my-script.sh \"https://example.com/script.sh\" && bash /tmp/my-script.sh&gt;. Find the logs at '/var/log/mathworks.log'."
      }
    },
    "ClusterLogLevel": {
      "metadata": {
        "description": "Log level controls the amount of detail in the generated logs, ranging from 'Off' (no logging aside from essential system messages) to 'Highest' (full debug mode). To diagnose any cluster issues with support engineers, increase the log level. Log levels above 'Medium' can reduce performance."
      },
      "type": "String",
      "allowedValues": [
        "0-Off",
        "1-Lowest",
        "2-Low",
        "3-Medium",
        "4-Medium-High",
        "5-High",
        "6-Highest"
      ],
      "defaultValue": "2-Low"
    }
  },
  "variables": {
    "fixedPrefix": "parallelserver",
    "resourceGroupUniqueString": "[uniqueString(resourceGroup().id)]",
    "namingPrefix": "[concat(variables('fixedPrefix'), '-', variables('resourceGroupUniqueString'))]",
    "addressPrefix": "10.0.0.0/16",
    "subnetPrefix": "10.0.0.0/24",
    "newOrExistingVirtualNetwork": "Existing",
    "virtualNetworkCreateName": "[concat(variables('namingPrefix'), '-vnet')]",
    "subnetCreateName": "[concat(variables('namingPrefix'), '-subnet')]",
    "virtualNetworkName": "[if(equals(variables('newOrExistingVirtualNetwork'),'Existing'),last(split(parameters('virtualNetworkResourceID'),'/')),variables('virtualNetworkCreateName'))]",
    "subnetName": "[if(equals(variables('newOrExistingVirtualNetwork'),'Existing'),parameters('subnetName'),variables('subnetCreateName'))]",
    "subnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetName'))]",
    "subnet": "[if(equals(variables('newOrExistingVirtualNetwork'),'New'),variables('subnetRef'),concat(parameters('virtualNetworkResourceID'), '/subnets/', parameters('subnetName')))]",
    "cuaTrackingNum": "pid-bcfd52e4-d2d7-4ca3-ba20-9a37f7f85c5f-partnercenter",
    "headnodeMachineName": "[concat(variables('fixedPrefix'), '-headnode')]",
    "vmssName": "[concat(variables('fixedPrefix'), '-vmss')]",
    "publisher": "mathworks-inc",
    "offer": "matlab-parallel-server-ref-arch-vm-offer",
    "sku": "matlab-parallel-server-ref-arch-r2024a-vm-sku",
    "version": "1.0.1",
    "imageReference": {
      "publisher": "[variables('publisher')]",
      "offer": "[variables('offer')]",
      "sku": "[variables('sku')]",
      "version": "[variables('version')]"
    },
    "plan": {
      "name": "[variables('sku')]",
      "publisher": "[variables('publisher')]",
      "product": "[variables('offer')]"
    },
    "osDisk": {
      "createOption": "fromImage",
      "managedDisk": {
        "storageAccountType": "Premium_LRS"
      }
    },
    "storageProfileWithoutDataDisk": {
      "imageReference": "[variables('imageReference')]",
      "osDisk": "[variables('osDisk')]"
    },
    "storageProfileWithDataDisk": {
      "imageReference": "[variables('imageReference')]",
      "osDisk": "[variables('osDisk')]",
      "dataDisks": [
        {
          "name": "[concat(variables('headnodeMachineName'), '-database')]",
          "diskSizeGB": "[parameters('databaseVolumeSize')]",
          "lun": 0,
          "createOption": "Empty",
          "caching": "None"
        }
      ]
    },
    "publicIPPostfix": "pub",
    "headnodeIPName": "[concat(variables('namingPrefix'), variables('publicIPPostfix'))]",
    "dnsLabelPrefix": "[concat('azure-', variables('resourceGroupUniqueString'))]",
    "publicIpTimeout": "20",
    "networkInterfacePostfix": "nic",
    "networkInterfaceName": "[concat(variables('headnodeMachineName'), variables('networkInterfacePostfix'))]",
    "publicIpConfigPostfix": "ipConfig",
    "networkSecurityGroupName": "[concat(variables('namingPrefix'), '-nsg')]",
    "totalPorts": "[add(7, mul(4, parameters('numWorkersPerNode')))]",
    "startPort": 27350,
    "finalPort": "[add(variables('startPort'), variables('totalPorts'))]",
    "storageAccountName": "[concat('mwstorage', variables('resourceGroupUniqueString'))]",
    "sharedStorageAccountSku": {
      "name": "Premium_LRS",
      "tier": "Premium"
    },
    "userDataScript": [
      "#!/usr/bin/env bash",
      "# Copyright 2024 The MathWorks, Inc.",
      "",
      "STARTUP_FOLDER=/opt/mathworks/startup",
      "# Load startup variables",
      "if [[ -r ${STARTUP_FOLDER}/.env ]]; then",
      "    set -o allexport",
      "    source ${STARTUP_FOLDER}/.env",
      "    set +o allexport",
      "fi",
      "",
      "# Define startup parameters",
      "[concat('export USERNAME=', parameters('adminUsername'))]",
      "[concat('export JOB_MANAGER_NAME=''', parameters('clusterName'), '''')]",
      "[concat('export WORKERS_PER_NODE=', parameters('numWorkersPerNode'))]",
      "[concat('export MLM_LICENSE_FILE=', parameters('licenseServer'))]",
      "[concat('export SECURITY_LEVEL=', parameters('MJSSecurityLevel'))]",
      "[concat('export SCHEDULING_ALGORITHM=', parameters('MJSSchedulingAlgorithm'))]",
      "[concat('export AZURE_STORAGE_ACCOUNT=', variables('storageAccountName'))]",
      "[concat('export OPTIONAL_USER_COMMAND=''', parameters('optionalUserCommand'), '''')]",
      "[concat('export CLUSTER_LOG_LEVEL=', parameters('ClusterLogLevel'))]",
      "{{NODE_SPECIFIC_PARAMETERS}}",
      "",
      "# Run startup scripts",
      "mkdir -p /var/log/mathworks",
      "run-parts --verbose --exit-on-error --regex '^[0-9]+_.+$' ${STARTUP_FOLDER} >> /var/log/mathworks/startup.log 2>&1"
    ],
    "terminationPolicy": "[if(equals(parameters('automaticallyTerminateCluster'), 'When cluster is idle'), 'on_idle', if(equals(parameters('automaticallyTerminateCluster'),'Never'),'never',parameters('automaticallyTerminateCluster')))]",
    "startupParametersHeadnode": [
      "export NODE_TYPE='HEADNODE'",
      "[concat('export ENABLE_AUTOSCALING=', parameters('enableAutoscaling'))]",
      "[concat('export MAX_NODES=', parameters('maxWorkerNodes'))]",
      "[concat('export DESIRED_CAPACITY=', parameters('numWorkerNodes'))]",
      "[concat('export TERMINATION_POLICY=\"', variables('terminationPolicy'), '\"')]"
    ],
    "startupParametersWorker": [
      "export NODE_TYPE='WORKER'",
      "[concat('export USE_SPOT_INSTANCE=', parameters('UseSpotInstancesForWorkerNodes'))]"
    ],
    "clusterManagementRoleName": "[guid(resourceGroup().id, 'cluster-management-role')]",
    "tagsForAll": {
      "provider": "[variables('cuaTrackingNum')]"
    },
    "roleDeploymentCondition": "[or(not(equals(parameters('enableAutoscaling'), 'No')), not(equals(parameters('automaticallyTerminateCluster'), 'Disable auto-termination')))]",
    "mwInitializingTag": {
      "mw-state": "initializing"
    },
    "tagsForVM": "[if(variables('roleDeploymentCondition'), union(variables('tagsForAll'), variables('mwInitializingTag')), variables('tagsForAll'))]",
    "tagsForVMSS": {
      "mwMinCount": "[parameters('minWorkerNodes')]",
      "mwDesiredCount": "[parameters('numWorkerNodes')]",
      "mwMaxCount": "[parameters('maxWorkerNodes')]",
      "mwWorkersPerNode": "[parameters('numWorkersPerNode')]",
      "mwWorkerIdleTimeoutMinutes": 10
    },
    "vmssManagementPermissions": [
      "Microsoft.Compute/virtualMachineScaleSets/read",
      "Microsoft.Compute/virtualMachineScaleSets/write",
      "Microsoft.Compute/virtualMachineScaleSets/delete/action",
      "Microsoft.Compute/virtualMachineScaleSets/virtualMachines/read",
      "Microsoft.Compute/virtualMachineScaleSets/virtualMachines/write",
      "Microsoft.Compute/virtualMachineScaleSets/virtualMachines/delete"
    ],
    "headnodeManagementPermissions": [
      "Microsoft.Resources/tags/write",
      "Microsoft.Compute/virtualMachines/read",
      "Microsoft.Compute/virtualMachines/deallocate/action"
    ]
  },
  "resources": [
    {
      "condition": "[equals(variables('newOrExistingVirtualNetwork'),'New')]",
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2023-04-01",
      "name": "[variables('virtualNetworkName')]",
      "location": "[resourceGroup().location]",
      "tags": "[variables('tagsForAll')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetCreateName')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefix')]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2023-04-01",
      "name": "[variables('headnodeIPName')]",
      "location": "[resourceGroup().location]",
      "tags": "[variables('tagsForAll')]",
      "properties": {
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[concat(variables('headnodeMachineName'), variables('dnsLabelPrefix'))]"
        },
        "idleTimeoutInMinutes": "[variables('publicIpTimeout')]"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2023-01-01",
      "name": "[variables('storageAccountName')]",
      "location": "[resourceGroup().location]",
      "tags": "[variables('tagsForAll')]",
      "sku": "[variables('sharedStorageAccountSku')]",
      "kind": "FileStorage",
      "properties": {
        "dnsEndpointType": "Standard",
        "defaultToOAuthAuthentication": false,
        "publicNetworkAccess": "Enabled",
        "allowCrossTenantReplication": false,
        "minimumTlsVersion": "TLS1_2",
        "allowBlobPublicAccess": false,
        "allowSharedKeyAccess": true,
        "largeFileSharesState": "Enabled",
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": false,
        "encryption": {
          "requireInfrastructureEncryption": false,
          "services": {
            "file": {
              "keyType": "Account",
              "enabled": true
            },
            "blob": {
              "keyType": "Account",
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/fileServices",
      "apiVersion": "2023-01-01",
      "name": "[concat(variables('storageAccountName'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ],
      "sku": "[variables('sharedStorageAccountSku')]",
      "properties": {
        "protocolSettings": {
          "smb": {
            "multichannel": {
              "enabled": false
            },
            "versions": "SMB2.1;SMB3.0;SMB3.1.1;",
            "authenticationMethods": "NTLMv2;Kerberos;",
            "kerberosTicketEncryption": "RC4-HMAC;AES-256;",
            "channelEncryption": "AES-128-CCM;AES-128-GCM;AES-256-GCM;"
          }
        },
        "cors": {
          "corsRules": []
        },
        "shareDeleteRetentionPolicy": {
          "enabled": true,
          "days": 15
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
      "apiVersion": "2023-01-01",
      "name": "[concat(variables('storageAccountName'), '/default/persisted')]",
      "condition": "[greaterOrEquals(parameters('sharedPersistedStorage'), 1)]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/fileServices', variables('storageAccountName'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ],
      "properties": {
        "accessTier": "Premium",
        "shareQuota": "[if(and(greater(parameters('sharedPersistedStorage'), 0), less(parameters('sharedPersistedStorage'), 100)), 100, parameters('sharedPersistedStorage'))]",
        "enabledProtocols": "SMB"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
      "apiVersion": "2023-01-01",
      "name": "[concat(variables('storageAccountName'), '/default/tmp')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/fileServices', variables('storageAccountName'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ],
      "properties": {
        "accessTier": "Premium",
        "shareQuota": 100,
        "enabledProtocols": "SMB"
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2023-04-01",
      "name": "[variables('networkSecurityGroupName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
      ],
      "tags": "[variables('tagsForAll')]",
      "properties": {
        "securityRules": [
          {
            "name": "default-allow-ssh",
            "properties": {
              "priority": 1000,
              "sourceAddressPrefix": "[parameters('clientIPAddress')]",
              "protocol": "Tcp",
              "destinationPortRange": "22",
              "access": "Allow",
              "direction": "Inbound",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*"
            }
          },
          {
            "name": "mathworks-job-scheduler-inbound",
            "properties": {
              "priority": 1010,
              "sourceAddressPrefix": "[parameters('clientIPAddress')]",
              "protocol": "Tcp",
              "destinationPortRange": "[concat(variables('startPort'), '-', variables('finalPort'))]",
              "access": "Allow",
              "direction": "Inbound",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*"
            }
          },
          {
            "name": "allow-internal-traffic",
            "properties": {
              "priority": 1020,
              "sourceAddressPrefix": "VirtualNetwork",
              "protocol": "Tcp",
              "destinationPortRange": "*",
              "access": "Allow",
              "direction": "Inbound",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "VirtualNetwork"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2023-04-01",
      "name": "[variables('networkInterfaceName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIpAddresses', variables('headnodeIPName'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
      ],
      "tags": "[variables('tagsForAll')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "[concat(variables('headnodeMachineName'), variables('publicIpConfigPostfix'))]",
            "properties": {
              "subnet": {
                "id": "[variables('subnet')]"
              },
              "privateIPAllocationMethod": "Dynamic",
              "publicIpAddress": {
                "id": "[resourceId('Microsoft.Network/publicIpAddresses', variables('headnodeIPName'))]"
              }
            }
          }
        ],
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2023-03-01",
      "name": "[variables('headnodeMachineName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]"
      ],
      "tags": "[variables('tagsForVM')]",
      "plan": "[variables('plan')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "osProfile": {
          "computerName": "[variables('headnodeMachineName')]",
          "AdminUsername": "[parameters('adminUsername')]",
          "AdminPassword": "[parameters('adminPassword')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": false,
            "provisionVmAgent": true
          }
        },
        "hardwareProfile": {
          "vmSize": "[parameters('headnodeVMSize')]"
        },
        "storageProfile": "[if(greater(parameters('databaseVolumeSize'), 0), variables('storageProfileWithDataDisk'), variables('storageProfileWithoutDataDisk'))]",
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]"
            }
          ]
        },
        "userData": "[base64(replace(join(variables('userDataScript'), '\n'), '{{NODE_SPECIFIC_PARAMETERS}}', concat(join(variables('startupParametersHeadnode'), '\n'), '\nexport AZURE_STORAGE_KEY=', listKeys(variables('storageAccountName'), '2023-01-01').keys[0].value, '\nexport HEADNODE_HOSTNAME=', reference(variables('headnodeIPName')).dnsSettings.fqdn)))]"
      }
    },
    {
      "condition": "[or(not(equals(parameters('enableAutoscaling'), 'No')), not(equals(parameters('automaticallyTerminateCluster'), 'Disable auto-termination')))]",
      "type": "Microsoft.Authorization/roleDefinitions",
      "apiVersion": "2022-04-01",
      "name": "[variables('clusterManagementRoleName')]",
      "tags": "[variables('tagsForAll')]",
      "properties": {
        "assignableScopes": [
          "[resourceGroup().id]"
        ],
        "description": "Grants access to manage VMSS and VMs.",
        "permissions": [
          {
            "actions": "[union(variables('headnodeManagementPermissions'), variables('vmssManagementPermissions'))]"
          }
        ],
        "roleName": "[concat('Cluster Orchestrator - ', resourceGroup().name)]",
        "type": "customRole"
      }
    },
    {
      "condition": "[or(not(equals(parameters('enableAutoscaling'), 'No')), not(equals(parameters('automaticallyTerminateCluster'), 'Disable auto-termination')))]",
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid(resourceGroup().id, 'headnode-role')]",
      "dependsOn": [
        "[resourceId('Microsoft.Authorization/roleDefinitions/', variables('clusterManagementRoleName'))]",
        "[resourceId('Microsoft.Compute/virtualMachines/', variables('headnodeMachineName'))]"
      ],
      "tags": "[variables('tagsForAll')]",
      "properties": {
        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions/', variables('clusterManagementRoleName'))]",
        "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', variables('headnodeMachineName')), '2023-03-01', 'Full').identity.principalId]",
        "principalType": "ServicePrincipal"
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "apiVersion": "2023-03-01",
      "name": "[variables('vmssName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines/', variables('headnodeMachineName'))]"
      ],
      "tags": "[union(variables('tagsForAll'),variables('tagsForVMSS'))]",
      "sku": {
        "name": "[parameters('workerVMSize')]",
        "tier": "Standard",
        "capacity": "[parameters('numWorkerNodes')]"
      },
      "plan": "[variables('plan')]",
      "properties": {
        "overprovision": false,
        "upgradepolicy": {
          "mode": "Automatic"
        },
        "singlePlacementGroup": "[if(equals(parameters('useSpotInstancesForWorkerNodes'), 'Yes'), bool('true'), json('null'))]",
        "virtualMachineProfile": {
          "priority": "[if(equals(parameters('useSpotInstancesForWorkerNodes'), 'Yes'), 'Spot', 'Regular')]",
          "evictionPolicy": "[if(equals(parameters('useSpotInstancesForWorkerNodes'), 'Yes'), 'Delete', json('null'))]",
          "billingProfile": {
            "maxPrice": "[if(equals(parameters('useSpotInstancesForWorkerNodes'), 'Yes'), -1, json('null'))]"
          },
          "scheduledEventsProfile": {
            "terminateNotificationProfile": {
              "enable": true
            }
          },
          "osProfile": {
            "computerNamePrefix": "[variables('vmssName')]",
            "AdminUsername": "[parameters('adminUsername')]",
            "AdminPassword": "[parameters('adminPassword')]",
            "linuxConfiguration": {
              "disablePasswordAuthentication": false,
              "provisionVmAgent": true
            }
          },
          "storageProfile": "[variables('storageProfileWithoutDataDisk')]",
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "[concat(variables('vmssName'), variables('networkInterfacePostfix'))]",
                "properties": {
                  "primary": true,
                  "ipConfigurations": [
                    {
                      "name": "[concat(variables('vmssName'), variables('publicIpConfigPostfix'))]",
                      "properties": {
                        "subnet": {
                          "id": "[variables('subnet')]"
                        },
                        "publicIpAddressConfiguration": {
                          "name": "[variables('publicIpPostfix')]",
                          "properties": {
                            "dnsSettings": {
                              "domainNameLabel": "[concat(variables('vmssName'), variables('dnsLabelPrefix'))]"
                            },
                            "idleTimeoutInMinutes": "[variables('publicIpTimeout')]"
                          }
                        }
                      }
                    }
                  ],
                  "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
                  }
                }
              }
            ]
          },
          "userData": "[base64(replace(join(variables('userDataScript'), '\n'), '{{NODE_SPECIFIC_PARAMETERS}}', concat(join(variables('startupParametersWorker'), '\n'), '\nexport AZURE_STORAGE_KEY=', listKeys(variables('storageAccountName'), '2023-01-01').keys[0].value, '\nexport HEADNODE_HOSTNAME=', reference(variables('headnodeIPName')).dnsSettings.fqdn, '\nexport HEADNODE_LOCAL_IP=', reference(variables('networkInterfaceName')).ipConfigurations[0].properties.privateIPAddress)))]"
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "pid-bcfd52e4-d2d7-4ca3-ba20-9a37f7f85c5f-partnercenter",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachineScaleSets/', variables('vmssName'))]"
      ],
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      }
    }
  ],
  "outputs": {
    "virtualNetworkResourceID": {
      "type": "String",
      "value": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]"
    }
  }
}